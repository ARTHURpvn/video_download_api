#!/usr/bin/env python3
"""
Script para criar execut√°vel standalone do YouTube Downloader
Usa PyInstaller para empacotar a aplica√ß√£o
"""

import PyInstaller.__main__
import os
import shutil
import sys
from pathlib import Path

def build_executable():
    """Criar execut√°vel com PyInstaller"""

    print("üöÄ Iniciando build do execut√°vel...")

    # Limpar builds anteriores
    if os.path.exists('build'):
        shutil.rmtree('build')
    if os.path.exists('dist'):
        shutil.rmtree('dist')

    # Determinar extens√£o do execut√°vel baseado no SO
    exe_extension = '.exe' if sys.platform == 'win32' else ''

    # Op√ß√µes do PyInstaller
    pyinstaller_args = [
        'gui_app.py',  # Script principal
        '--name=YouTubeDownloader',  # Nome do execut√°vel
        '--onefile',  # Criar um √∫nico arquivo
        '--windowed',  # Sem console (apenas GUI)
        '--clean',  # Limpar cache
        '--noconfirm',  # N√£o pedir confirma√ß√£o

        # Adicionar m√≥dulos necess√°rios
        '--hidden-import=uvicorn',
        '--hidden-import=fastapi',
        '--hidden-import=yt_dlp',
        '--hidden-import=moviepy',
        '--hidden-import=app',
        '--hidden-import=app.main',
        '--hidden-import=app.routes',
        '--hidden-import=app.services',
        '--hidden-import=app.models',
        '--hidden-import=app.utils',

        # Incluir diret√≥rio app completo
        '--add-data=app:app' if sys.platform != 'win32' else '--add-data=app;app',

        # √çcone (opcional - descomentar se tiver um √≠cone)
        # '--icon=icon.ico',
    ]

    # Executar PyInstaller
    print("üì¶ Empacotando aplica√ß√£o...")
    try:
        PyInstaller.__main__.run(pyinstaller_args)
    except Exception as e:
        print(f"\n‚ùå Erro ao criar execut√°vel: {e}")
        return False

    # Determinar local de destino baseado no SO
    if sys.platform == 'win32':
        # Windows: Desktop do usu√°rio
        desktop = Path.home() / 'Desktop'
        dest_folder = desktop / 'YouTubeDownloader'
    elif sys.platform == 'darwin':
        # macOS: Applications ou Desktop
        dest_folder = Path.home() / 'Desktop' / 'YouTubeDownloader'
    else:
        # Linux: Home do usu√°rio
        dest_folder = Path.home() / 'YouTubeDownloader'

    # Criar pasta de destino
    dest_folder.mkdir(parents=True, exist_ok=True)

    # Mover execut√°vel para o destino
    exe_name = f'YouTubeDownloader{exe_extension}'
    source_exe = Path('dist') / exe_name
    dest_exe = dest_folder / exe_name

    if source_exe.exists():
        print(f"\nüì¶ Movendo execut√°vel para: {dest_folder}")
        shutil.copy2(source_exe, dest_exe)

        # Tornar execut√°vel no Linux/macOS
        if sys.platform != 'win32':
            os.chmod(dest_exe, 0o755)

    print("\n‚úÖ Build completo!")
    print(f"üìÅ Execut√°vel criado em: {dest_exe}")

    if sys.platform == 'win32':
        print(f"\nüìç O execut√°vel foi salvo na pasta:")
        print(f"   {dest_folder}")
        print("\nüìù Instru√ß√µes:")
        print("   1. V√° at√© a pasta 'YouTubeDownloader' na sua √Årea de Trabalho")
        print("   2. Clique duas vezes em 'YouTubeDownloader.exe' para executar")
        print("   3. Voc√™ pode criar um atalho na √°rea de trabalho se desejar")
    else:
        print("\nüìù Instru√ß√µes:")
        print("   1. O execut√°vel est√° na pasta indicada acima")
        print("   2. Voc√™ pode mover o arquivo para qualquer lugar")
        print("   3. Clique duas vezes para executar")

    print("\n‚ö†Ô∏è  Nota: FFmpeg ser√° baixado automaticamente se necess√°rio")

    return True


if __name__ == "__main__":
    success = build_executable()
    sys.exit(0 if success else 1)
